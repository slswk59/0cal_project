<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<mvc:annotation-driven></mvc:annotation-driven>

	<!-- [1] DataSource 빈 선언 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="oracle.jdbc.OracleDriver" />
		<property name="url"
			value="jdbc:oracle:thin:@127.0.0.1:1521:xe" />
		<property name="username" value="hr" />
		<property name="password" value="a1234" />
	</bean>

	<!-- [2]SqlSessionFactoryBean 빈 선언 -->
	<bean id="sqlSessionFactoryBean"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<list>
				<value>classpath:mapper/shoppingMapper.xml</value>
				<value>classpath:mapper/memberMapper.xml</value>
				<value>classpath:mapper/genderage.xml</value>
				<value>classpath:mapper/cartMapper.xml</value>
			</list>
		</property>
	</bean>

	<!-- [3] SqlSessionTemplate 빈 선언 SqlSessionTemplate은 생성자 인자로 SqlSessionFactory를 
		사용해서 생성될 수 있다. -->
	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean" />
	</bean>


	<!-- [4] TransactionManager 빈 선언 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- [5] 선언적 트랜잭션 : <tx:advice>태그를 이용한 트랜잭션 처리 -->
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*Process"
				rollback-for="org.springframework.dao.DuplicateKeyException" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut
			expression="execution(*  service.*ServiceImp.*Process(..))" id="aa" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="aa" />
	</aop:config>

	<!-- tiles -->
	<bean
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles/tiles.xml</value>
			</list>
		</property>
	</bean>


	<!-- ViewResolver(사용자에게 결과를 랜더링하여 보여주기 위하여 사용) -->

	<!--논리적인 뷰 이름과 동일한 ID를 갖는 <bean>으로 등록된 view 객체를 찾음 -->
	<bean
		class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="1" />
	</bean>

	<!-- tiles 적용 order로 우선순이 설정! -->
	<bean
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<property name="order" value="2" />
	</bean>

	<!-- 웹 어필리케이션의 WAR파일 내에 포함된 View 템플릿을 찾음. 경로는 논리적 View 이름에 접두사와 접미사를 붙여 
		구성 항상 뷰 이름이 매핑되는 뷰 객체를 리터하므로 마지막 순위를 갖도록 지정 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="3" />
	</bean>
</beans>